{
  "definitions": {
    "AnyPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/PropertyType"
        },
        {
          "description": "Represents an any value which allows any kind of value",
          "type": "object"
        }
      ]
    },
    "ArrayDefinitionType": {
      "allOf": [
        {
          "$ref": "#/definitions/CollectionDefinitionType"
        },
        {
          "description": "Represents an array which contains a dynamic list of values of the same type",
          "type": "object"
        }
      ]
    },
    "ArrayPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/CollectionPropertyType"
        },
        {
          "description": "Represents an array which contains a dynamic list of values of the same type",
          "type": "object"
        }
      ]
    },
    "BooleanPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/ScalarPropertyType"
        },
        {
          "description": "Represents a boolean value",
          "type": "object"
        }
      ]
    },
    "CollectionDefinitionType": {
      "allOf": [
        {
          "$ref": "#/definitions/DefinitionType"
        },
        {
          "description": "Base collection type",
          "type": "object",
          "base": true,
          "properties": {
            "schema": {
              "$ref": "#/definitions/PropertyType"
            },
            "type": {
              "description": "",
              "type": "string"
            }
          },
          "discriminator": "type",
          "mapping": {
            "ArrayDefinitionType": "array",
            "MapDefinitionType": "map"
          }
        }
      ]
    },
    "CollectionPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/PropertyType"
        },
        {
          "description": "Base collection property type",
          "type": "object",
          "base": true,
          "properties": {
            "schema": {
              "$ref": "#/definitions/PropertyType"
            },
            "type": {
              "description": "",
              "type": "string"
            }
          },
          "discriminator": "type",
          "mapping": {
            "ArrayPropertyType": "array",
            "MapPropertyType": "map"
          }
        }
      ]
    },
    "DefinitionType": {
      "description": "Base definition type",
      "type": "object",
      "base": true,
      "properties": {
        "deprecated": {
          "description": "",
          "type": "boolean"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        }
      },
      "discriminator": "type",
      "mapping": {
        "ArrayDefinitionType": "array",
        "MapDefinitionType": "map",
        "StructDefinitionType": "struct"
      }
    },
    "GenericPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/PropertyType"
        },
        {
          "description": "Represents a generic value which can be replaced with a dynamic type",
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the generic, it is recommended to use common generic names like T or TValue. These generics can then be replaced on usage with a concrete type through the template property at a reference.",
              "type": "string"
            }
          }
        }
      ]
    },
    "IntegerPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/ScalarPropertyType"
        },
        {
          "description": "Represents an integer value",
          "type": "object"
        }
      ]
    },
    "MapDefinitionType": {
      "allOf": [
        {
          "$ref": "#/definitions/CollectionDefinitionType"
        },
        {
          "description": "Represents a map which contains a dynamic set of key value entries of the same type",
          "type": "object"
        }
      ]
    },
    "MapPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/CollectionPropertyType"
        },
        {
          "description": "Represents a map which contains a dynamic set of key value entries of the same type",
          "type": "object"
        }
      ]
    },
    "NumberPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/ScalarPropertyType"
        },
        {
          "description": "Represents a float value",
          "type": "object"
        }
      ]
    },
    "PropertyType": {
      "description": "Base property type",
      "type": "object",
      "base": true,
      "properties": {
        "deprecated": {
          "description": "",
          "type": "boolean"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "nullable": {
          "description": "",
          "type": "boolean"
        },
        "type": {
          "description": "",
          "type": "string"
        }
      },
      "discriminator": "type",
      "mapping": {
        "AnyPropertyType": "any",
        "ArrayPropertyType": "array",
        "BooleanPropertyType": "boolean",
        "GenericPropertyType": "generic",
        "IntegerPropertyType": "integer",
        "MapPropertyType": "map",
        "NumberPropertyType": "number",
        "ReferencePropertyType": "reference",
        "StringPropertyType": "string"
      }
    },
    "ReferencePropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/PropertyType"
        },
        {
          "description": "Represents a reference to a definition type",
          "type": "object",
          "properties": {
            "target": {
              "description": "The target type, this must be a key which is available under the definitions keyword.",
              "type": "string"
            },
            "template": {
              "description": "A map where the key is the name of the generic and the value must point to a key under the definitions keyword. This can be used in case the target points to a type which contains generics, then it is possible to replace those generics with a concrete type.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "ScalarPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/PropertyType"
        },
        {
          "description": "Base scalar property type",
          "type": "object",
          "base": true,
          "properties": {
            "type": {
              "description": "",
              "type": "string"
            }
          },
          "discriminator": "type",
          "mapping": {
            "BooleanPropertyType": "boolean",
            "IntegerPropertyType": "integer",
            "NumberPropertyType": "number",
            "StringPropertyType": "string"
          }
        }
      ]
    },
    "StringPropertyType": {
      "allOf": [
        {
          "$ref": "#/definitions/ScalarPropertyType"
        },
        {
          "description": "Represents a string value",
          "type": "object",
          "properties": {
            "format": {
              "description": "Optional describes the format of the string. Supported are the following types: date, date-time and time. A code generator may use a fitting data type to represent such a format, if not supported it should fall back to a string.",
              "type": "string"
            }
          }
        }
      ]
    },
    "StructDefinitionType": {
      "allOf": [
        {
          "$ref": "#/definitions/DefinitionType"
        },
        {
          "description": "A struct represents a class/structure with a fix set of defined properties.",
          "type": "object",
          "properties": {
            "base": {
              "description": "Indicates whether this is a base structure, default is false. If true the structure is used a base type, this means it is not possible to create an instance from this structure.",
              "type": "boolean"
            },
            "discriminator": {
              "description": "Optional the property name of a discriminator property. This should be only used in case this is also a base structure.",
              "type": "string"
            },
            "mapping": {
              "description": "In case a discriminator is configured it is required to configure a mapping. The mapping is a map where the key is the type name and the value the actual discriminator type value.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "parent": {
              "$ref": "#/definitions/ReferencePropertyType"
            },
            "properties": {
              "description": "Contains a map of available properties for this struct.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/PropertyType"
              }
            }
          }
        }
      ]
    },
    "TypeSchema": {
      "description": "TypeSchema specification",
      "type": "object",
      "properties": {
        "definitions": {
          "description": "",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DefinitionType"
          }
        },
        "import": {
          "description": "Through the import keyword it is possible to import other TypeSchema documents. It contains a map where the key is the namespace and the value points to a remote document. The value is a URL and a code generator should support at least the following schemes: file, http, https.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "root": {
          "description": "Specifies the root type of your specification.",
          "type": "string"
        }
      }
    }
  }
}